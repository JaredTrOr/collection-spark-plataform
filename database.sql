-- 1. Users Table
-- Stores customer information.
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4()
    username VARCHAR(100) NOT NULL UNIQUE,
    name VARCHAR(150) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    -- We will skip password/authentication for now to focus on the logic
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 2. Items Table (Our "Products")
-- We'll add an "inventory" field.
CREATE TABLE items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    -- How many we have in stock
    inventory INT NOT NULL DEFAULT 0 CHECK (inventory >= 0)
);

-- 3. Cart Items Table (The Shopping Cart)
-- This "joins" a user to the items they want to buy.
CREATE TABLE cart_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    item_id BIGINT NOT NULL REFERENCES items(id) ON DELETE CASCADE,
    quantity INT NOT NULL CHECK (quantity > 0),

    -- A user can only have one row per item in their cart.
    -- To add more, they update the quantity.
    UNIQUE(user_id, item_id)
);

-- 4. Orders Table
-- A high-level record of a completed purchase.
CREATE TABLE orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id),
    total_amount DECIMAL(10, 2) NOT NULL,
    status VARCHAR(50) DEFAULT 'PENDING' NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 5. Order Items Table (The "Receipt")
-- This "joins" an order to the specific items that were in it.
CREATE TABLE order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    item_id BIGINT NOT NULL REFERENCES items(id),
    quantity INT NOT NULL,

    -- CRITICAL: We save the price at the time of purchase.
    -- This way, if the item's price changes later, the order history is still correct.
    price_at_purchase DECIMAL(10, 2) NOT NULL
);